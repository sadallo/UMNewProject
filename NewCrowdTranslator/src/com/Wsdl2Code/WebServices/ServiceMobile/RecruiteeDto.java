package com.Wsdl2Code.WebServices.ServiceMobile;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 7/29/2015 10:05:22 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import java.io.Serializable;
import java.util.Hashtable;

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class RecruiteeDto implements KvmSerializable, Serializable {
    
    public String ageId;
    public String educationId;
    public String email;
    public String firstName;
    public String gender;
    public String incomeId;
    public String lastName;
    public String rankingId;
    public double rankingValue;
    public boolean rankingValueSpecified;
    public String recruiteeId;
    
    public RecruiteeDto(){}
    
    public RecruiteeDto(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("AgeId"))
        {
            Object obj = soapObject.getProperty("AgeId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                ageId = j.toString();
            }else if (obj!= null && obj instanceof String){
                ageId = (String) obj;
            }
        }
        if (soapObject.hasProperty("EducationId"))
        {
            Object obj = soapObject.getProperty("EducationId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                educationId = j.toString();
            }else if (obj!= null && obj instanceof String){
                educationId = (String) obj;
            }
        }
        if (soapObject.hasProperty("Email"))
        {
            Object obj = soapObject.getProperty("Email");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                email = j.toString();
            }else if (obj!= null && obj instanceof String){
                email = (String) obj;
            }
        }
        if (soapObject.hasProperty("FirstName"))
        {
            Object obj = soapObject.getProperty("FirstName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                firstName = j.toString();
            }else if (obj!= null && obj instanceof String){
                firstName = (String) obj;
            }
        }
        if (soapObject.hasProperty("Gender"))
        {
            Object obj = soapObject.getProperty("Gender");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                gender = j.toString();
            }else if (obj!= null && obj instanceof String){
                gender = (String) obj;
            }
        }
        if (soapObject.hasProperty("IncomeId"))
        {
            Object obj = soapObject.getProperty("IncomeId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                incomeId = j.toString();
            }else if (obj!= null && obj instanceof String){
                incomeId = (String) obj;
            }
        }
        if (soapObject.hasProperty("LastName"))
        {
            Object obj = soapObject.getProperty("LastName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                lastName = j.toString();
            }else if (obj!= null && obj instanceof String){
                lastName = (String) obj;
            }
        }
        if (soapObject.hasProperty("RankingId"))
        {
            Object obj = soapObject.getProperty("RankingId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                rankingId = j.toString();
            }else if (obj!= null && obj instanceof String){
                rankingId = (String) obj;
            }
        }
        if (soapObject.hasProperty("RankingValue"))
        {
            Object obj = soapObject.getProperty("RankingValue");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                rankingValue = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                rankingValue = (Double) obj;
            }
        }
        if (soapObject.hasProperty("RankingValueSpecified"))
        {
            Object obj = soapObject.getProperty("RankingValueSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                rankingValueSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                rankingValueSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("RecruiteeId"))
        {
            Object obj = soapObject.getProperty("RecruiteeId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                recruiteeId = j.toString();
            }else if (obj!= null && obj instanceof String){
                recruiteeId = (String) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return ageId;
            case 1:
                return educationId;
            case 2:
                return email;
            case 3:
                return firstName;
            case 4:
                return gender;
            case 5:
                return incomeId;
            case 6:
                return lastName;
            case 7:
                return rankingId;
            case 8:
                return rankingValue;
            case 9:
                return rankingValueSpecified;
            case 10:
                return recruiteeId;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 11;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "AgeId";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "EducationId";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Email";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "FirstName";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Gender";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "IncomeId";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "LastName";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "RankingId";
                break;
            case 8:
                info.type = Double.class;
                info.name = "RankingValue";
                break;
            case 9:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "RankingValueSpecified";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "RecruiteeId";
                break;
        }
    }
    

    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
