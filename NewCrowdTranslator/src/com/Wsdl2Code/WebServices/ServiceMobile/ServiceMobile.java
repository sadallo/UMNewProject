package com.Wsdl2Code.WebServices.ServiceMobile;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 7/29/2015 10:05:22 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import java.util.List;

import org.ksoap2.HeaderProperty;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.MarshalFloat;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;

import android.os.AsyncTask;

import com.Wsdl2Code.WebServices.ServiceMobile.WS_Enums.SoapProtocolVersion;

public class ServiceMobile {
    
    public String NAMESPACE ="http://tempuri.org/";
    public String url="http://umdbms.no-ip.info/umnewelasticwebsite/ServiceMobile.svc";
    public int timeOut = 500;
    public IWsdl2CodeEvents eventHandler;
    public SoapProtocolVersion soapVersion;
    
    public ServiceMobile(){}
    
    public ServiceMobile(IWsdl2CodeEvents eventHandler)
    {
        this.eventHandler = eventHandler;
    }
    public ServiceMobile(IWsdl2CodeEvents eventHandler,String url)
    {
        this.eventHandler = eventHandler;
        this.url = url;
    }
    public ServiceMobile(IWsdl2CodeEvents eventHandler,String url,int timeOutInSeconds)
    {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }
    public void setTimeOut(int seconds){
        this.timeOut = seconds * 1000;
    }
    public void setUrl(String url){
        this.url = url;
    }
    public void updateRankingAsync(String rankingId,String rankingName) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updateRankingAsync(rankingId, rankingName, null);
    }
    
    public void updateRankingAsync(final String rankingId,final String rankingName,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                updateRanking(rankingId, rankingName, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updateRanking", result);
                }
            }
        }.execute();
    }
    
    public void updateRanking(String rankingId,String rankingName){
        updateRanking(rankingId, rankingName, null);
    }
    
    public void updateRanking(String rankingId,String rankingName,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","updateRanking");
        soapReq.addProperty("RankingId",rankingId);
        soapReq.addProperty("RankingName",rankingName);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/updateRanking", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/updateRanking", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void deleteRankingAsync(String rankingId,String rankingName) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        deleteRankingAsync(rankingId, rankingName, null);
    }
    
    public void deleteRankingAsync(final String rankingId,final String rankingName,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                deleteRanking(rankingId, rankingName, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("deleteRanking", result);
                }
            }
        }.execute();
    }
    
    public void deleteRanking(String rankingId,String rankingName){
        deleteRanking(rankingId, rankingName, null);
    }
    
    public void deleteRanking(String rankingId,String rankingName,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","deleteRanking");
        soapReq.addProperty("RankingId",rankingId);
        soapReq.addProperty("RankingName",rankingName);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/deleteRanking", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/deleteRanking", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void createRankingDTOAsync(String rankingId,String rankingName) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        createRankingDTOAsync(rankingId, rankingName, null);
    }
    
    public void createRankingDTOAsync(final String rankingId,final String rankingName,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RankingDto>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RankingDto doInBackground(Void... params) {
                return createRankingDTO(rankingId, rankingName, headers);
            }
            @Override
            protected void onPostExecute(RankingDto result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("createRankingDTO", result);
                }
            }
        }.execute();
    }
    
    public RankingDto createRankingDTO(String rankingId,String rankingName){
        return createRankingDTO(rankingId, rankingName, null);
    }
    
    public RankingDto createRankingDTO(String rankingId,String rankingName,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","createRankingDTO");
        soapReq.addProperty("RankingId",rankingId);
        soapReq.addProperty("RankingName",rankingName);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/createRankingDTO", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/createRankingDTO", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RankingDto resultVariable =  new RankingDto (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void selectAllAgeAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        selectAllAgeAsync(null);
    }
    
    public void selectAllAgeAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorAgeDto>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorAgeDto doInBackground(Void... params) {
                return selectAllAge(headers);
            }
            @Override
            protected void onPostExecute(VectorAgeDto result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("selectAllAge", result);
                }
            }
        }.execute();
    }
    
    public VectorAgeDto selectAllAge(){
        return selectAllAge(null);
    }
    
    public VectorAgeDto selectAllAge(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","selectAllAge");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/selectAllAge", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/selectAllAge", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorAgeDto resultVariable = new VectorAgeDto(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void selectAgeByIdAsync(String ageId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        selectAgeByIdAsync(ageId, null);
    }
    
    public void selectAgeByIdAsync(final String ageId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, AgeDto>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected AgeDto doInBackground(Void... params) {
                return selectAgeById(ageId, headers);
            }
            @Override
            protected void onPostExecute(AgeDto result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("selectAgeById", result);
                }
            }
        }.execute();
    }
    
    public AgeDto selectAgeById(String ageId){
        return selectAgeById(ageId, null);
    }
    
    public AgeDto selectAgeById(String ageId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","selectAgeById");
        soapReq.addProperty("AgeId",ageId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/selectAgeById", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/selectAgeById", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    AgeDto resultVariable =  new AgeDto (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void selectAllEducationAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        selectAllEducationAsync(null);
    }
    
    public void selectAllEducationAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorEducationDto>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorEducationDto doInBackground(Void... params) {
                return selectAllEducation(headers);
            }
            @Override
            protected void onPostExecute(VectorEducationDto result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("selectAllEducation", result);
                }
            }
        }.execute();
    }
    
    public VectorEducationDto selectAllEducation(){
        return selectAllEducation(null);
    }
    
    public VectorEducationDto selectAllEducation(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","selectAllEducation");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/selectAllEducation", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/selectAllEducation", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorEducationDto resultVariable = new VectorEducationDto(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void selectEducationByIdAsync(String educationId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        selectEducationByIdAsync(educationId, null);
    }
    
    public void selectEducationByIdAsync(final String educationId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, EducationDto>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected EducationDto doInBackground(Void... params) {
                return selectEducationById(educationId, headers);
            }
            @Override
            protected void onPostExecute(EducationDto result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("selectEducationById", result);
                }
            }
        }.execute();
    }
    
    public EducationDto selectEducationById(String educationId){
        return selectEducationById(educationId, null);
    }
    
    public EducationDto selectEducationById(String educationId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","selectEducationById");
        soapReq.addProperty("EducationId",educationId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/selectEducationById", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/selectEducationById", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    EducationDto resultVariable =  new EducationDto (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void selectAllIncomeAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        selectAllIncomeAsync(null);
    }
    
    public void selectAllIncomeAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorIncomeDto>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorIncomeDto doInBackground(Void... params) {
                return selectAllIncome(headers);
            }
            @Override
            protected void onPostExecute(VectorIncomeDto result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("selectAllIncome", result);
                }
            }
        }.execute();
    }
    
    public VectorIncomeDto selectAllIncome(){
        return selectAllIncome(null);
    }
    
    public VectorIncomeDto selectAllIncome(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","selectAllIncome");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/selectAllIncome", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/selectAllIncome", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorIncomeDto resultVariable = new VectorIncomeDto(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void selectIncomeByIdAsync(String incomeId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        selectIncomeByIdAsync(incomeId, null);
    }
    
    public void selectIncomeByIdAsync(final String incomeId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, IncomeDto>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected IncomeDto doInBackground(Void... params) {
                return selectIncomeById(incomeId, headers);
            }
            @Override
            protected void onPostExecute(IncomeDto result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("selectIncomeById", result);
                }
            }
        }.execute();
    }
    
    public IncomeDto selectIncomeById(String incomeId){
        return selectIncomeById(incomeId, null);
    }
    
    public IncomeDto selectIncomeById(String incomeId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","selectIncomeById");
        soapReq.addProperty("IncomeId",incomeId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/selectIncomeById", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/selectIncomeById", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    IncomeDto resultVariable =  new IncomeDto (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void selectRecommendedJobByRecruiteeIdAsync(String recruiteeId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        selectRecommendedJobByRecruiteeIdAsync(recruiteeId, null);
    }
    
    public void selectRecommendedJobByRecruiteeIdAsync(final String recruiteeId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorRecommendedJobDto>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorRecommendedJobDto doInBackground(Void... params) {
                return selectRecommendedJobByRecruiteeId(recruiteeId, headers);
            }
            @Override
            protected void onPostExecute(VectorRecommendedJobDto result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("selectRecommendedJobByRecruiteeId", result);
                }
            }
        }.execute();
    }
    
    public VectorRecommendedJobDto selectRecommendedJobByRecruiteeId(String recruiteeId){
        return selectRecommendedJobByRecruiteeId(recruiteeId, null);
    }
    
    public VectorRecommendedJobDto selectRecommendedJobByRecruiteeId(String recruiteeId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","selectRecommendedJobByRecruiteeId");
        soapReq.addProperty("RecruiteeId",recruiteeId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/selectRecommendedJobByRecruiteeId", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/selectRecommendedJobByRecruiteeId", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorRecommendedJobDto resultVariable = new VectorRecommendedJobDto(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void insertRecommendedJobAsync(String jobId,String recruiteeId,double predictedRankingValue,boolean predictedRankingValueSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        insertRecommendedJobAsync(jobId, recruiteeId, predictedRankingValue, predictedRankingValueSpecified, null);
    }
    
    public void insertRecommendedJobAsync(final String jobId,final String recruiteeId,final double predictedRankingValue,final boolean predictedRankingValueSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                insertRecommendedJob(jobId, recruiteeId, predictedRankingValue, predictedRankingValueSpecified, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("insertRecommendedJob", result);
                }
            }
        }.execute();
    }
    
    public void insertRecommendedJob(String jobId,String recruiteeId,double predictedRankingValue,boolean predictedRankingValueSpecified){
        insertRecommendedJob(jobId, recruiteeId, predictedRankingValue, predictedRankingValueSpecified, null);
    }
    
    public void insertRecommendedJob(String jobId,String recruiteeId,double predictedRankingValue,boolean predictedRankingValueSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","insertRecommendedJob");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("JobId",jobId);
        soapReq.addProperty("RecruiteeId",recruiteeId);
        soapReq.addProperty("PredictedRankingValue",predictedRankingValue);
        soapReq.addProperty("PredictedRankingValueSpecified",predictedRankingValueSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/insertRecommendedJob", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/insertRecommendedJob", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void updateRecommendedJobAsync(String jobId,String recruiteeId,double predictedRankingValue,boolean predictedRankingValueSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updateRecommendedJobAsync(jobId, recruiteeId, predictedRankingValue, predictedRankingValueSpecified, null);
    }
    
    public void updateRecommendedJobAsync(final String jobId,final String recruiteeId,final double predictedRankingValue,final boolean predictedRankingValueSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                updateRecommendedJob(jobId, recruiteeId, predictedRankingValue, predictedRankingValueSpecified, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updateRecommendedJob", result);
                }
            }
        }.execute();
    }
    
    public void updateRecommendedJob(String jobId,String recruiteeId,double predictedRankingValue,boolean predictedRankingValueSpecified){
        updateRecommendedJob(jobId, recruiteeId, predictedRankingValue, predictedRankingValueSpecified, null);
    }
    
    public void updateRecommendedJob(String jobId,String recruiteeId,double predictedRankingValue,boolean predictedRankingValueSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","updateRecommendedJob");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("JobId",jobId);
        soapReq.addProperty("RecruiteeId",recruiteeId);
        soapReq.addProperty("PredictedRankingValue",predictedRankingValue);
        soapReq.addProperty("PredictedRankingValueSpecified",predictedRankingValueSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/updateRecommendedJob", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/updateRecommendedJob", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void deleteRecommendedJobAsync(String jobId,String recruiteeId,double predictedRankingValue,boolean predictedRankingValueSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        deleteRecommendedJobAsync(jobId, recruiteeId, predictedRankingValue, predictedRankingValueSpecified, null);
    }
    
    public void deleteRecommendedJobAsync(final String jobId,final String recruiteeId,final double predictedRankingValue,final boolean predictedRankingValueSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                deleteRecommendedJob(jobId, recruiteeId, predictedRankingValue, predictedRankingValueSpecified, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("deleteRecommendedJob", result);
                }
            }
        }.execute();
    }
    
    public void deleteRecommendedJob(String jobId,String recruiteeId,double predictedRankingValue,boolean predictedRankingValueSpecified){
        deleteRecommendedJob(jobId, recruiteeId, predictedRankingValue, predictedRankingValueSpecified, null);
    }
    
    public void deleteRecommendedJob(String jobId,String recruiteeId,double predictedRankingValue,boolean predictedRankingValueSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","deleteRecommendedJob");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("JobId",jobId);
        soapReq.addProperty("RecruiteeId",recruiteeId);
        soapReq.addProperty("PredictedRankingValue",predictedRankingValue);
        soapReq.addProperty("PredictedRankingValueSpecified",predictedRankingValueSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/deleteRecommendedJob", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/deleteRecommendedJob", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void selectAllRecruiteeAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        selectAllRecruiteeAsync(null);
    }
    
    public void selectAllRecruiteeAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorRecruiteeDto>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorRecruiteeDto doInBackground(Void... params) {
                return selectAllRecruitee(headers);
            }
            @Override
            protected void onPostExecute(VectorRecruiteeDto result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("selectAllRecruitee", result);
                }
            }
        }.execute();
    }
    
    public VectorRecruiteeDto selectAllRecruitee(){
        return selectAllRecruitee(null);
    }
    
    public VectorRecruiteeDto selectAllRecruitee(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","selectAllRecruitee");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/selectAllRecruitee", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/selectAllRecruitee", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorRecruiteeDto resultVariable = new VectorRecruiteeDto(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void selectRecruiteeByIdAsync(String recruiteeId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        selectRecruiteeByIdAsync(recruiteeId, null);
    }
    
    public void selectRecruiteeByIdAsync(final String recruiteeId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RecruiteeDto>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RecruiteeDto doInBackground(Void... params) {
                return selectRecruiteeById(recruiteeId, headers);
            }
            @Override
            protected void onPostExecute(RecruiteeDto result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("selectRecruiteeById", result);
                }
            }
        }.execute();
    }
    
    public RecruiteeDto selectRecruiteeById(String recruiteeId){
        return selectRecruiteeById(recruiteeId, null);
    }
    
    public RecruiteeDto selectRecruiteeById(String recruiteeId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","selectRecruiteeById");
        soapReq.addProperty("RecruiteeId",recruiteeId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/selectRecruiteeById", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/selectRecruiteeById", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RecruiteeDto resultVariable =  new RecruiteeDto (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void selectRecruiteeByEmailAsync(String recruiteeId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        selectRecruiteeByEmailAsync(recruiteeId, null);
    }
    
    public void selectRecruiteeByEmailAsync(final String recruiteeId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RecruiteeDto>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RecruiteeDto doInBackground(Void... params) {
                return selectRecruiteeByEmail(recruiteeId, headers);
            }
            @Override
            protected void onPostExecute(RecruiteeDto result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("selectRecruiteeByEmail", result);
                }
            }
        }.execute();
    }
    
    public RecruiteeDto selectRecruiteeByEmail(String recruiteeId){
        return selectRecruiteeByEmail(recruiteeId, null);
    }
    
    public RecruiteeDto selectRecruiteeByEmail(String recruiteeId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","selectRecruiteeByEmail");
        soapReq.addProperty("RecruiteeId",recruiteeId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/selectRecruiteeByEmail", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/selectRecruiteeByEmail", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RecruiteeDto resultVariable =  new RecruiteeDto (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void insertRecruiteeAsync(String recruiteeId,String rankingId,double rankingValue,boolean rankingValueSpecified,String email,String firstName,String lastName,String gender,String ageId,String educationId,String incomeId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        insertRecruiteeAsync(recruiteeId, rankingId, rankingValue, rankingValueSpecified, email, firstName, lastName, gender, ageId, educationId, incomeId, null);
    }
    
    public void insertRecruiteeAsync(final String recruiteeId,final String rankingId,final double rankingValue,final boolean rankingValueSpecified,final String email,final String firstName,final String lastName,final String gender,final String ageId,final String educationId,final String incomeId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                insertRecruitee(recruiteeId, rankingId, rankingValue, rankingValueSpecified, email, firstName, lastName, gender, ageId, educationId, incomeId, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("insertRecruitee", result);
                }
            }
        }.execute();
    }
    
    public void insertRecruitee(String recruiteeId,String rankingId,double rankingValue,boolean rankingValueSpecified,String email,String firstName,String lastName,String gender,String ageId,String educationId,String incomeId){
        insertRecruitee(recruiteeId, rankingId, rankingValue, rankingValueSpecified, email, firstName, lastName, gender, ageId, educationId, incomeId, null);
    }
    
    public void insertRecruitee(String recruiteeId,String rankingId,double rankingValue,boolean rankingValueSpecified,String email,String firstName,String lastName,String gender,String ageId,String educationId,String incomeId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","insertRecruitee");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("RecruiteeId",recruiteeId);
        soapReq.addProperty("RankingId",rankingId);
        soapReq.addProperty("RankingValue",rankingValue);
        soapReq.addProperty("RankingValueSpecified",rankingValueSpecified);
        soapReq.addProperty("Email",email);
        soapReq.addProperty("FirstName",firstName);
        soapReq.addProperty("LastName",lastName);
        soapReq.addProperty("Gender",gender);
        soapReq.addProperty("AgeId",ageId);
        soapReq.addProperty("EducationId",educationId);
        soapReq.addProperty("IncomeId",incomeId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/insertRecruitee", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/insertRecruitee", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void updateRecruiteeAsync(String recruiteeId,String rankingId,double rankingValue,boolean rankingValueSpecified,String email,String firstName,String lastName,String gender,String ageId,String educationId,String incomeId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updateRecruiteeAsync(recruiteeId, rankingId, rankingValue, rankingValueSpecified, email, firstName, lastName, gender, ageId, educationId, incomeId, null);
    }
    
    public void updateRecruiteeAsync(final String recruiteeId,final String rankingId,final double rankingValue,final boolean rankingValueSpecified,final String email,final String firstName,final String lastName,final String gender,final String ageId,final String educationId,final String incomeId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                updateRecruitee(recruiteeId, rankingId, rankingValue, rankingValueSpecified, email, firstName, lastName, gender, ageId, educationId, incomeId, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updateRecruitee", result);
                }
            }
        }.execute();
    }
    
    public void updateRecruitee(String recruiteeId,String rankingId,double rankingValue,boolean rankingValueSpecified,String email,String firstName,String lastName,String gender,String ageId,String educationId,String incomeId){
        updateRecruitee(recruiteeId, rankingId, rankingValue, rankingValueSpecified, email, firstName, lastName, gender, ageId, educationId, incomeId, null);
    }
    
    public void updateRecruitee(String recruiteeId,String rankingId,double rankingValue,boolean rankingValueSpecified,String email,String firstName,String lastName,String gender,String ageId,String educationId,String incomeId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","updateRecruitee");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("RecruiteeId",recruiteeId);
        soapReq.addProperty("RankingId",rankingId);
        soapReq.addProperty("RankingValue",rankingValue);
        soapReq.addProperty("RankingValueSpecified",rankingValueSpecified);
        soapReq.addProperty("Email",email);
        soapReq.addProperty("FirstName",firstName);
        soapReq.addProperty("LastName",lastName);
        soapReq.addProperty("Gender",gender);
        soapReq.addProperty("AgeId",ageId);
        soapReq.addProperty("EducationId",educationId);
        soapReq.addProperty("IncomeId",incomeId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/updateRecruitee", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/updateRecruitee", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void deleteRecruiteeAsync(String recruiteeId,String rankingId,double rankingValue,boolean rankingValueSpecified,String email,String firstName,String lastName,String gender,String ageId,String educationId,String incomeId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        deleteRecruiteeAsync(recruiteeId, rankingId, rankingValue, rankingValueSpecified, email, firstName, lastName, gender, ageId, educationId, incomeId, null);
    }
    
    public void deleteRecruiteeAsync(final String recruiteeId,final String rankingId,final double rankingValue,final boolean rankingValueSpecified,final String email,final String firstName,final String lastName,final String gender,final String ageId,final String educationId,final String incomeId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                deleteRecruitee(recruiteeId, rankingId, rankingValue, rankingValueSpecified, email, firstName, lastName, gender, ageId, educationId, incomeId, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("deleteRecruitee", result);
                }
            }
        }.execute();
    }
    
    public void deleteRecruitee(String recruiteeId,String rankingId,double rankingValue,boolean rankingValueSpecified,String email,String firstName,String lastName,String gender,String ageId,String educationId,String incomeId){
        deleteRecruitee(recruiteeId, rankingId, rankingValue, rankingValueSpecified, email, firstName, lastName, gender, ageId, educationId, incomeId, null);
    }
    
    public void deleteRecruitee(String recruiteeId,String rankingId,double rankingValue,boolean rankingValueSpecified,String email,String firstName,String lastName,String gender,String ageId,String educationId,String incomeId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","deleteRecruitee");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("RecruiteeId",recruiteeId);
        soapReq.addProperty("RankingId",rankingId);
        soapReq.addProperty("RankingValue",rankingValue);
        soapReq.addProperty("RankingValueSpecified",rankingValueSpecified);
        soapReq.addProperty("Email",email);
        soapReq.addProperty("FirstName",firstName);
        soapReq.addProperty("LastName",lastName);
        soapReq.addProperty("Gender",gender);
        soapReq.addProperty("AgeId",ageId);
        soapReq.addProperty("EducationId",educationId);
        soapReq.addProperty("IncomeId",incomeId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/deleteRecruitee", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/deleteRecruitee", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void createRecruiteeDTOAsync(String recruiteeId,String rankingId,double rankingValue,boolean rankingValueSpecified,String email,String firstName,String lastName,String gender,String ageId,String educationId,String incomeId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        createRecruiteeDTOAsync(recruiteeId, rankingId, rankingValue, rankingValueSpecified, email, firstName, lastName, gender, ageId, educationId, incomeId, null);
    }
    
    public void createRecruiteeDTOAsync(final String recruiteeId,final String rankingId,final double rankingValue,final boolean rankingValueSpecified,final String email,final String firstName,final String lastName,final String gender,final String ageId,final String educationId,final String incomeId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RecruiteeDto>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RecruiteeDto doInBackground(Void... params) {
                return createRecruiteeDTO(recruiteeId, rankingId, rankingValue, rankingValueSpecified, email, firstName, lastName, gender, ageId, educationId, incomeId, headers);
            }
            @Override
            protected void onPostExecute(RecruiteeDto result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("createRecruiteeDTO", result);
                }
            }
        }.execute();
    }
    
    public RecruiteeDto createRecruiteeDTO(String recruiteeId,String rankingId,double rankingValue,boolean rankingValueSpecified,String email,String firstName,String lastName,String gender,String ageId,String educationId,String incomeId){
        return createRecruiteeDTO(recruiteeId, rankingId, rankingValue, rankingValueSpecified, email, firstName, lastName, gender, ageId, educationId, incomeId, null);
    }
    
    public RecruiteeDto createRecruiteeDTO(String recruiteeId,String rankingId,double rankingValue,boolean rankingValueSpecified,String email,String firstName,String lastName,String gender,String ageId,String educationId,String incomeId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","createRecruiteeDTO");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("RecruiteeId",recruiteeId);
        soapReq.addProperty("RankingId",rankingId);
        soapReq.addProperty("RankingValue",rankingValue);
        soapReq.addProperty("RankingValueSpecified",rankingValueSpecified);
        soapReq.addProperty("Email",email);
        soapReq.addProperty("FirstName",firstName);
        soapReq.addProperty("LastName",lastName);
        soapReq.addProperty("Gender",gender);
        soapReq.addProperty("AgeId",ageId);
        soapReq.addProperty("EducationId",educationId);
        soapReq.addProperty("IncomeId",incomeId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/createRecruiteeDTO", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/createRecruiteeDTO", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RecruiteeDto resultVariable =  new RecruiteeDto (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void selectRecruiteeBySkillIdAsync(String skillId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        selectRecruiteeBySkillIdAsync(skillId, null);
    }
    
    public void selectRecruiteeBySkillIdAsync(final String skillId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorRecruiteeDto>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorRecruiteeDto doInBackground(Void... params) {
                return selectRecruiteeBySkillId(skillId, headers);
            }
            @Override
            protected void onPostExecute(VectorRecruiteeDto result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("selectRecruiteeBySkillId", result);
                }
            }
        }.execute();
    }
    
    public VectorRecruiteeDto selectRecruiteeBySkillId(String skillId){
        return selectRecruiteeBySkillId(skillId, null);
    }
    
    public VectorRecruiteeDto selectRecruiteeBySkillId(String skillId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","selectRecruiteeBySkillId");
        soapReq.addProperty("SkillId",skillId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/selectRecruiteeBySkillId", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/selectRecruiteeBySkillId", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorRecruiteeDto resultVariable = new VectorRecruiteeDto(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void addSkillToRecruiteeAsync(String recruiteeId,String skillId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addSkillToRecruiteeAsync(recruiteeId, skillId, null);
    }
    
    public void addSkillToRecruiteeAsync(final String recruiteeId,final String skillId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                addSkillToRecruitee(recruiteeId, skillId, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addSkillToRecruitee", result);
                }
            }
        }.execute();
    }
    
    public void addSkillToRecruitee(String recruiteeId,String skillId){
        addSkillToRecruitee(recruiteeId, skillId, null);
    }
    
    public void addSkillToRecruitee(String recruiteeId,String skillId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","addSkillToRecruitee");
        soapReq.addProperty("RecruiteeId",recruiteeId);
        soapReq.addProperty("SkillId",skillId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/addSkillToRecruitee", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/addSkillToRecruitee", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void removeSkillFromRecruiteeAsync(String recruiteeId,String skillId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        removeSkillFromRecruiteeAsync(recruiteeId, skillId, null);
    }
    
    public void removeSkillFromRecruiteeAsync(final String recruiteeId,final String skillId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                removeSkillFromRecruitee(recruiteeId, skillId, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("removeSkillFromRecruitee", result);
                }
            }
        }.execute();
    }
    
    public void removeSkillFromRecruitee(String recruiteeId,String skillId){
        removeSkillFromRecruitee(recruiteeId, skillId, null);
    }
    
    public void removeSkillFromRecruitee(String recruiteeId,String skillId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","removeSkillFromRecruitee");
        soapReq.addProperty("RecruiteeId",recruiteeId);
        soapReq.addProperty("SkillId",skillId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/removeSkillFromRecruitee", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/removeSkillFromRecruitee", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void selectAllJobAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        selectAllJobAsync(null);
    }
    
    public void selectAllJobAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorJobDto>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorJobDto doInBackground(Void... params) {
                return selectAllJob(headers);
            }
            @Override
            protected void onPostExecute(VectorJobDto result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("selectAllJob", result);
                }
            }
        }.execute();
    }
    
    public VectorJobDto selectAllJob(){
        return selectAllJob(null);
    }
    
    public VectorJobDto selectAllJob(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","selectAllJob");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/selectAllJob", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/selectAllJob", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorJobDto resultVariable = new VectorJobDto(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void selectJobNotDoneByRecruiteeIdRecommendationAsync(String recruiteeId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        selectJobNotDoneByRecruiteeIdRecommendationAsync(recruiteeId, null);
    }
    
    public void selectJobNotDoneByRecruiteeIdRecommendationAsync(final String recruiteeId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorJobDto>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorJobDto doInBackground(Void... params) {
                return selectJobNotDoneByRecruiteeIdRecommendation(recruiteeId, headers);
            }
            @Override
            protected void onPostExecute(VectorJobDto result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("selectJobNotDoneByRecruiteeIdRecommendation", result);
                }
            }
        }.execute();
    }
    
    public VectorJobDto selectJobNotDoneByRecruiteeIdRecommendation(String recruiteeId){
        return selectJobNotDoneByRecruiteeIdRecommendation(recruiteeId, null);
    }
    
    public VectorJobDto selectJobNotDoneByRecruiteeIdRecommendation(String recruiteeId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","selectJobNotDoneByRecruiteeIdRecommendation");
        soapReq.addProperty("recruiteeId",recruiteeId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/selectJobNotDoneByRecruiteeIdRecommendation", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/selectJobNotDoneByRecruiteeIdRecommendation", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorJobDto resultVariable = new VectorJobDto(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void selectJobNotDoneByRecruiteeIdAsync(String recruiteeId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        selectJobNotDoneByRecruiteeIdAsync(recruiteeId, null);
    }
    
    public void selectJobNotDoneByRecruiteeIdAsync(final String recruiteeId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorJobDto>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorJobDto doInBackground(Void... params) {
                return selectJobNotDoneByRecruiteeId(recruiteeId, headers);
            }
            @Override
            protected void onPostExecute(VectorJobDto result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("selectJobNotDoneByRecruiteeId", result);
                }
            }
        }.execute();
    }
    
    public VectorJobDto selectJobNotDoneByRecruiteeId(String recruiteeId){
        return selectJobNotDoneByRecruiteeId(recruiteeId, null);
    }
    
    public VectorJobDto selectJobNotDoneByRecruiteeId(String recruiteeId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","selectJobNotDoneByRecruiteeId");
        soapReq.addProperty("recruiteeId",recruiteeId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/selectJobNotDoneByRecruiteeId", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/selectJobNotDoneByRecruiteeId", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorJobDto resultVariable = new VectorJobDto(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void selectJobByIdAsync(String jobId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        selectJobByIdAsync(jobId, null);
    }
    
    public void selectJobByIdAsync(final String jobId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, JobDto>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected JobDto doInBackground(Void... params) {
                return selectJobById(jobId, headers);
            }
            @Override
            protected void onPostExecute(JobDto result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("selectJobById", result);
                }
            }
        }.execute();
    }
    
    public JobDto selectJobById(String jobId){
        return selectJobById(jobId, null);
    }
    
    public JobDto selectJobById(String jobId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","selectJobById");
        soapReq.addProperty("JobId",jobId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/selectJobById", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/selectJobById", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    JobDto resultVariable =  new JobDto (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void insertJobAsync(String jobId,String jobName,String compensationId,String employerId,String jobDescription,int jobQuota,boolean jobQuotaSpecified,double jobExperienceLevel,boolean jobExperienceLevelSpecified,double jobCompensationValue,boolean jobCompensationValueSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        insertJobAsync(jobId, jobName, compensationId, employerId, jobDescription, jobQuota, jobQuotaSpecified, jobExperienceLevel, jobExperienceLevelSpecified, jobCompensationValue, jobCompensationValueSpecified, null);
    }
    
    public void insertJobAsync(final String jobId,final String jobName,final String compensationId,final String employerId,final String jobDescription,final int jobQuota,final boolean jobQuotaSpecified,final double jobExperienceLevel,final boolean jobExperienceLevelSpecified,final double jobCompensationValue,final boolean jobCompensationValueSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                insertJob(jobId, jobName, compensationId, employerId, jobDescription, jobQuota, jobQuotaSpecified, jobExperienceLevel, jobExperienceLevelSpecified, jobCompensationValue, jobCompensationValueSpecified, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("insertJob", result);
                }
            }
        }.execute();
    }
    
    public void insertJob(String jobId,String jobName,String compensationId,String employerId,String jobDescription,int jobQuota,boolean jobQuotaSpecified,double jobExperienceLevel,boolean jobExperienceLevelSpecified,double jobCompensationValue,boolean jobCompensationValueSpecified){
        insertJob(jobId, jobName, compensationId, employerId, jobDescription, jobQuota, jobQuotaSpecified, jobExperienceLevel, jobExperienceLevelSpecified, jobCompensationValue, jobCompensationValueSpecified, null);
    }
    
    public void insertJob(String jobId,String jobName,String compensationId,String employerId,String jobDescription,int jobQuota,boolean jobQuotaSpecified,double jobExperienceLevel,boolean jobExperienceLevelSpecified,double jobCompensationValue,boolean jobCompensationValueSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","insertJob");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("JobId",jobId);
        soapReq.addProperty("JobName",jobName);
        soapReq.addProperty("CompensationId",compensationId);
        soapReq.addProperty("EmployerId",employerId);
        soapReq.addProperty("JobDescription",jobDescription);
        soapReq.addProperty("JobQuota",jobQuota);
        soapReq.addProperty("JobQuotaSpecified",jobQuotaSpecified);
        soapReq.addProperty("JobExperienceLevel",jobExperienceLevel);
        soapReq.addProperty("JobExperienceLevelSpecified",jobExperienceLevelSpecified);
        soapReq.addProperty("JobCompensationValue",jobCompensationValue);
        soapReq.addProperty("JobCompensationValueSpecified",jobCompensationValueSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/insertJob", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/insertJob", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void updateJobAsync(String jobId,String jobName,String compensationId,String employerId,String jobDescription,int jobQuota,boolean jobQuotaSpecified,double jobExperienceLevel,boolean jobExperienceLevelSpecified,double jobCompensationValue,boolean jobCompensationValueSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updateJobAsync(jobId, jobName, compensationId, employerId, jobDescription, jobQuota, jobQuotaSpecified, jobExperienceLevel, jobExperienceLevelSpecified, jobCompensationValue, jobCompensationValueSpecified, null);
    }
    
    public void updateJobAsync(final String jobId,final String jobName,final String compensationId,final String employerId,final String jobDescription,final int jobQuota,final boolean jobQuotaSpecified,final double jobExperienceLevel,final boolean jobExperienceLevelSpecified,final double jobCompensationValue,final boolean jobCompensationValueSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                updateJob(jobId, jobName, compensationId, employerId, jobDescription, jobQuota, jobQuotaSpecified, jobExperienceLevel, jobExperienceLevelSpecified, jobCompensationValue, jobCompensationValueSpecified, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updateJob", result);
                }
            }
        }.execute();
    }
    
    public void updateJob(String jobId,String jobName,String compensationId,String employerId,String jobDescription,int jobQuota,boolean jobQuotaSpecified,double jobExperienceLevel,boolean jobExperienceLevelSpecified,double jobCompensationValue,boolean jobCompensationValueSpecified){
        updateJob(jobId, jobName, compensationId, employerId, jobDescription, jobQuota, jobQuotaSpecified, jobExperienceLevel, jobExperienceLevelSpecified, jobCompensationValue, jobCompensationValueSpecified, null);
    }
    
    public void updateJob(String jobId,String jobName,String compensationId,String employerId,String jobDescription,int jobQuota,boolean jobQuotaSpecified,double jobExperienceLevel,boolean jobExperienceLevelSpecified,double jobCompensationValue,boolean jobCompensationValueSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","updateJob");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("JobId",jobId);
        soapReq.addProperty("JobName",jobName);
        soapReq.addProperty("CompensationId",compensationId);
        soapReq.addProperty("EmployerId",employerId);
        soapReq.addProperty("JobDescription",jobDescription);
        soapReq.addProperty("JobQuota",jobQuota);
        soapReq.addProperty("JobQuotaSpecified",jobQuotaSpecified);
        soapReq.addProperty("JobExperienceLevel",jobExperienceLevel);
        soapReq.addProperty("JobExperienceLevelSpecified",jobExperienceLevelSpecified);
        soapReq.addProperty("JobCompensationValue",jobCompensationValue);
        soapReq.addProperty("JobCompensationValueSpecified",jobCompensationValueSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/updateJob", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/updateJob", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void deleteJobAsync(String jobId,String jobName,String compensationId,String employerId,String jobDescription,int jobQuota,boolean jobQuotaSpecified,double jobExperienceLevel,boolean jobExperienceLevelSpecified,double jobCompensationValue,boolean jobCompensationValueSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        deleteJobAsync(jobId, jobName, compensationId, employerId, jobDescription, jobQuota, jobQuotaSpecified, jobExperienceLevel, jobExperienceLevelSpecified, jobCompensationValue, jobCompensationValueSpecified, null);
    }
    
    public void deleteJobAsync(final String jobId,final String jobName,final String compensationId,final String employerId,final String jobDescription,final int jobQuota,final boolean jobQuotaSpecified,final double jobExperienceLevel,final boolean jobExperienceLevelSpecified,final double jobCompensationValue,final boolean jobCompensationValueSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                deleteJob(jobId, jobName, compensationId, employerId, jobDescription, jobQuota, jobQuotaSpecified, jobExperienceLevel, jobExperienceLevelSpecified, jobCompensationValue, jobCompensationValueSpecified, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("deleteJob", result);
                }
            }
        }.execute();
    }
    
    public void deleteJob(String jobId,String jobName,String compensationId,String employerId,String jobDescription,int jobQuota,boolean jobQuotaSpecified,double jobExperienceLevel,boolean jobExperienceLevelSpecified,double jobCompensationValue,boolean jobCompensationValueSpecified){
        deleteJob(jobId, jobName, compensationId, employerId, jobDescription, jobQuota, jobQuotaSpecified, jobExperienceLevel, jobExperienceLevelSpecified, jobCompensationValue, jobCompensationValueSpecified, null);
    }
    
    public void deleteJob(String jobId,String jobName,String compensationId,String employerId,String jobDescription,int jobQuota,boolean jobQuotaSpecified,double jobExperienceLevel,boolean jobExperienceLevelSpecified,double jobCompensationValue,boolean jobCompensationValueSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","deleteJob");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("JobId",jobId);
        soapReq.addProperty("JobName",jobName);
        soapReq.addProperty("CompensationId",compensationId);
        soapReq.addProperty("EmployerId",employerId);
        soapReq.addProperty("JobDescription",jobDescription);
        soapReq.addProperty("JobQuota",jobQuota);
        soapReq.addProperty("JobQuotaSpecified",jobQuotaSpecified);
        soapReq.addProperty("JobExperienceLevel",jobExperienceLevel);
        soapReq.addProperty("JobExperienceLevelSpecified",jobExperienceLevelSpecified);
        soapReq.addProperty("JobCompensationValue",jobCompensationValue);
        soapReq.addProperty("JobCompensationValueSpecified",jobCompensationValueSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/deleteJob", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/deleteJob", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void createJobDTOAsync(String jobId,String jobName,String compensationId,String employerId,String jobDescription,int jobQuota,boolean jobQuotaSpecified,double jobExperienceLevel,boolean jobExperienceLevelSpecified,double jobCompensationValue,boolean jobCompensationValueSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        createJobDTOAsync(jobId, jobName, compensationId, employerId, jobDescription, jobQuota, jobQuotaSpecified, jobExperienceLevel, jobExperienceLevelSpecified, jobCompensationValue, jobCompensationValueSpecified, null);
    }
    
    public void createJobDTOAsync(final String jobId,final String jobName,final String compensationId,final String employerId,final String jobDescription,final int jobQuota,final boolean jobQuotaSpecified,final double jobExperienceLevel,final boolean jobExperienceLevelSpecified,final double jobCompensationValue,final boolean jobCompensationValueSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, JobDto>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected JobDto doInBackground(Void... params) {
                return createJobDTO(jobId, jobName, compensationId, employerId, jobDescription, jobQuota, jobQuotaSpecified, jobExperienceLevel, jobExperienceLevelSpecified, jobCompensationValue, jobCompensationValueSpecified, headers);
            }
            @Override
            protected void onPostExecute(JobDto result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("createJobDTO", result);
                }
            }
        }.execute();
    }
    
    public JobDto createJobDTO(String jobId,String jobName,String compensationId,String employerId,String jobDescription,int jobQuota,boolean jobQuotaSpecified,double jobExperienceLevel,boolean jobExperienceLevelSpecified,double jobCompensationValue,boolean jobCompensationValueSpecified){
        return createJobDTO(jobId, jobName, compensationId, employerId, jobDescription, jobQuota, jobQuotaSpecified, jobExperienceLevel, jobExperienceLevelSpecified, jobCompensationValue, jobCompensationValueSpecified, null);
    }
    
    public JobDto createJobDTO(String jobId,String jobName,String compensationId,String employerId,String jobDescription,int jobQuota,boolean jobQuotaSpecified,double jobExperienceLevel,boolean jobExperienceLevelSpecified,double jobCompensationValue,boolean jobCompensationValueSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","createJobDTO");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("JobId",jobId);
        soapReq.addProperty("JobName",jobName);
        soapReq.addProperty("CompensationId",compensationId);
        soapReq.addProperty("EmployerId",employerId);
        soapReq.addProperty("JobDescription",jobDescription);
        soapReq.addProperty("JobQuota",jobQuota);
        soapReq.addProperty("JobQuotaSpecified",jobQuotaSpecified);
        soapReq.addProperty("JobExperienceLevel",jobExperienceLevel);
        soapReq.addProperty("JobExperienceLevelSpecified",jobExperienceLevelSpecified);
        soapReq.addProperty("JobCompensationValue",jobCompensationValue);
        soapReq.addProperty("JobCompensationValueSpecified",jobCompensationValueSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/createJobDTO", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/createJobDTO", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    JobDto resultVariable =  new JobDto (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void selectJobBySkillIdAsync(String skillId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        selectJobBySkillIdAsync(skillId, null);
    }
    
    public void selectJobBySkillIdAsync(final String skillId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorJobDto>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorJobDto doInBackground(Void... params) {
                return selectJobBySkillId(skillId, headers);
            }
            @Override
            protected void onPostExecute(VectorJobDto result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("selectJobBySkillId", result);
                }
            }
        }.execute();
    }
    
    public VectorJobDto selectJobBySkillId(String skillId){
        return selectJobBySkillId(skillId, null);
    }
    
    public VectorJobDto selectJobBySkillId(String skillId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","selectJobBySkillId");
        soapReq.addProperty("SkillId",skillId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/selectJobBySkillId", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/selectJobBySkillId", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorJobDto resultVariable = new VectorJobDto(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void addSkillToJobAsync(String jobId,String skillId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addSkillToJobAsync(jobId, skillId, null);
    }
    
    public void addSkillToJobAsync(final String jobId,final String skillId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                addSkillToJob(jobId, skillId, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addSkillToJob", result);
                }
            }
        }.execute();
    }
    
    public void addSkillToJob(String jobId,String skillId){
        addSkillToJob(jobId, skillId, null);
    }
    
    public void addSkillToJob(String jobId,String skillId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","addSkillToJob");
        soapReq.addProperty("JobId",jobId);
        soapReq.addProperty("SkillId",skillId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/addSkillToJob", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/addSkillToJob", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void removeSkillFromJobAsync(String jobId,String skillId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        removeSkillFromJobAsync(jobId, skillId, null);
    }
    
    public void removeSkillFromJobAsync(final String jobId,final String skillId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                removeSkillFromJob(jobId, skillId, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("removeSkillFromJob", result);
                }
            }
        }.execute();
    }
    
    public void removeSkillFromJob(String jobId,String skillId){
        removeSkillFromJob(jobId, skillId, null);
    }
    
    public void removeSkillFromJob(String jobId,String skillId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","removeSkillFromJob");
        soapReq.addProperty("JobId",jobId);
        soapReq.addProperty("SkillId",skillId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/removeSkillFromJob", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/removeSkillFromJob", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void selectAllSkillJobAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        selectAllSkillJobAsync(null);
    }
    
    public void selectAllSkillJobAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorSkillDto>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorSkillDto doInBackground(Void... params) {
                return selectAllSkillJob(headers);
            }
            @Override
            protected void onPostExecute(VectorSkillDto result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("selectAllSkillJob", result);
                }
            }
        }.execute();
    }
    
    public VectorSkillDto selectAllSkillJob(){
        return selectAllSkillJob(null);
    }
    
    public VectorSkillDto selectAllSkillJob(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","selectAllSkillJob");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/selectAllSkillJob", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/selectAllSkillJob", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorSkillDto resultVariable = new VectorSkillDto(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void selectSkillJobByIdAsync(String skillId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        selectSkillJobByIdAsync(skillId, null);
    }
    
    public void selectSkillJobByIdAsync(final String skillId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, SkillDto>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected SkillDto doInBackground(Void... params) {
                return selectSkillJobById(skillId, headers);
            }
            @Override
            protected void onPostExecute(SkillDto result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("selectSkillJobById", result);
                }
            }
        }.execute();
    }
    
    public SkillDto selectSkillJobById(String skillId){
        return selectSkillJobById(skillId, null);
    }
    
    public SkillDto selectSkillJobById(String skillId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","selectSkillJobById");
        soapReq.addProperty("SkillId",skillId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/selectSkillJobById", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/selectSkillJobById", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    SkillDto resultVariable =  new SkillDto (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void selectAllSkillRecruiteeAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        selectAllSkillRecruiteeAsync(null);
    }
    
    public void selectAllSkillRecruiteeAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorSkillDto1>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorSkillDto1 doInBackground(Void... params) {
                return selectAllSkillRecruitee(headers);
            }
            @Override
            protected void onPostExecute(VectorSkillDto1 result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("selectAllSkillRecruitee", result);
                }
            }
        }.execute();
    }
    
    public VectorSkillDto1 selectAllSkillRecruitee(){
        return selectAllSkillRecruitee(null);
    }
    
    public VectorSkillDto1 selectAllSkillRecruitee(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","selectAllSkillRecruitee");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/selectAllSkillRecruitee", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/selectAllSkillRecruitee", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorSkillDto1 resultVariable = new VectorSkillDto1(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void selectSkillRecruiteeByIdAsync(String skillId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        selectSkillRecruiteeByIdAsync(skillId, null);
    }
    
    public void selectSkillRecruiteeByIdAsync(final String skillId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, SkillDto1>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected SkillDto1 doInBackground(Void... params) {
                return selectSkillRecruiteeById(skillId, headers);
            }
            @Override
            protected void onPostExecute(SkillDto1 result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("selectSkillRecruiteeById", result);
                }
            }
        }.execute();
    }
    
    public SkillDto1 selectSkillRecruiteeById(String skillId){
        return selectSkillRecruiteeById(skillId, null);
    }
    
    public SkillDto1 selectSkillRecruiteeById(String skillId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","selectSkillRecruiteeById");
        soapReq.addProperty("SkillId",skillId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/selectSkillRecruiteeById", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/selectSkillRecruiteeById", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    SkillDto1 resultVariable =  new SkillDto1 (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void selectAllRankingAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        selectAllRankingAsync(null);
    }
    
    public void selectAllRankingAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorRankingDto>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorRankingDto doInBackground(Void... params) {
                return selectAllRanking(headers);
            }
            @Override
            protected void onPostExecute(VectorRankingDto result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("selectAllRanking", result);
                }
            }
        }.execute();
    }
    
    public VectorRankingDto selectAllRanking(){
        return selectAllRanking(null);
    }
    
    public VectorRankingDto selectAllRanking(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","selectAllRanking");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/selectAllRanking", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/selectAllRanking", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorRankingDto resultVariable = new VectorRankingDto(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void selectRankingByIdAsync(String rankingId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        selectRankingByIdAsync(rankingId, null);
    }
    
    public void selectRankingByIdAsync(final String rankingId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RankingDto>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RankingDto doInBackground(Void... params) {
                return selectRankingById(rankingId, headers);
            }
            @Override
            protected void onPostExecute(RankingDto result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("selectRankingById", result);
                }
            }
        }.execute();
    }
    
    public RankingDto selectRankingById(String rankingId){
        return selectRankingById(rankingId, null);
    }
    
    public RankingDto selectRankingById(String rankingId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","selectRankingById");
        soapReq.addProperty("RankingId",rankingId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/selectRankingById", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/selectRankingById", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RankingDto resultVariable =  new RankingDto (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void insertRankingAsync(String rankingId,String rankingName) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        insertRankingAsync(rankingId, rankingName, null);
    }
    
    public void insertRankingAsync(final String rankingId,final String rankingName,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                insertRanking(rankingId, rankingName, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("insertRanking", result);
                }
            }
        }.execute();
    }
    
    public void insertRanking(String rankingId,String rankingName){
        insertRanking(rankingId, rankingName, null);
    }
    
    public void insertRanking(String rankingId,String rankingName,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","insertRanking");
        soapReq.addProperty("RankingId",rankingId);
        soapReq.addProperty("RankingName",rankingName);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/insertRanking", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/insertRanking", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void selectAllTaskAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        selectAllTaskAsync(null);
    }
    
    public void selectAllTaskAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorTaskDto>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorTaskDto doInBackground(Void... params) {
                return selectAllTask(headers);
            }
            @Override
            protected void onPostExecute(VectorTaskDto result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("selectAllTask", result);
                }
            }
        }.execute();
    }
    
    public VectorTaskDto selectAllTask(){
        return selectAllTask(null);
    }
    
    public VectorTaskDto selectAllTask(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","selectAllTask");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/selectAllTask", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/selectAllTask", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorTaskDto resultVariable = new VectorTaskDto(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void selectTaskByIdAsync(String taskId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        selectTaskByIdAsync(taskId, null);
    }
    
    public void selectTaskByIdAsync(final String taskId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, TaskDto>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected TaskDto doInBackground(Void... params) {
                return selectTaskById(taskId, headers);
            }
            @Override
            protected void onPostExecute(TaskDto result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("selectTaskById", result);
                }
            }
        }.execute();
    }
    
    public TaskDto selectTaskById(String taskId){
        return selectTaskById(taskId, null);
    }
    
    public TaskDto selectTaskById(String taskId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","selectTaskById");
        soapReq.addProperty("TaskId",taskId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/selectTaskById", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/selectTaskById", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    TaskDto resultVariable =  new TaskDto (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void insertTaskAsync(String taskId,String jobId,String recruiteeId,String taskDescription,double rating,boolean ratingSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        insertTaskAsync(taskId, jobId, recruiteeId, taskDescription, rating, ratingSpecified, null);
    }
    
    public void insertTaskAsync(final String taskId,final String jobId,final String recruiteeId,final String taskDescription,final double rating,final boolean ratingSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                insertTask(taskId, jobId, recruiteeId, taskDescription, rating, ratingSpecified, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("insertTask", result);
                }
            }
        }.execute();
    }
    
    public void insertTask(String taskId,String jobId,String recruiteeId,String taskDescription,double rating,boolean ratingSpecified){
        insertTask(taskId, jobId, recruiteeId, taskDescription, rating, ratingSpecified, null);
    }
    
    public void insertTask(String taskId,String jobId,String recruiteeId,String taskDescription,double rating,boolean ratingSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","insertTask");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("TaskId",taskId);
        soapReq.addProperty("JobId",jobId);
        soapReq.addProperty("RecruiteeId",recruiteeId);
        soapReq.addProperty("TaskDescription",taskDescription);
        soapReq.addProperty("Rating",rating);
        soapReq.addProperty("RatingSpecified",ratingSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/insertTask", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/insertTask", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void updateTaskAsync(String taskId,String jobId,String recruiteeId,String taskDescription,double rating,boolean ratingSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updateTaskAsync(taskId, jobId, recruiteeId, taskDescription, rating, ratingSpecified, null);
    }
    
    public void updateTaskAsync(final String taskId,final String jobId,final String recruiteeId,final String taskDescription,final double rating,final boolean ratingSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                updateTask(taskId, jobId, recruiteeId, taskDescription, rating, ratingSpecified, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updateTask", result);
                }
            }
        }.execute();
    }
    
    public void updateTask(String taskId,String jobId,String recruiteeId,String taskDescription,double rating,boolean ratingSpecified){
        updateTask(taskId, jobId, recruiteeId, taskDescription, rating, ratingSpecified, null);
    }
    
    public void updateTask(String taskId,String jobId,String recruiteeId,String taskDescription,double rating,boolean ratingSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","updateTask");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("TaskId",taskId);
        soapReq.addProperty("JobId",jobId);
        soapReq.addProperty("RecruiteeId",recruiteeId);
        soapReq.addProperty("TaskDescription",taskDescription);
        soapReq.addProperty("Rating",rating);
        soapReq.addProperty("RatingSpecified",ratingSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/updateTask", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/updateTask", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void deleteTaskAsync(String taskId,String jobId,String recruiteeId,String taskDescription,double rating,boolean ratingSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        deleteTaskAsync(taskId, jobId, recruiteeId, taskDescription, rating, ratingSpecified, null);
    }
    
    public void deleteTaskAsync(final String taskId,final String jobId,final String recruiteeId,final String taskDescription,final double rating,final boolean ratingSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                deleteTask(taskId, jobId, recruiteeId, taskDescription, rating, ratingSpecified, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("deleteTask", result);
                }
            }
        }.execute();
    }
    
    public void deleteTask(String taskId,String jobId,String recruiteeId,String taskDescription,double rating,boolean ratingSpecified){
        deleteTask(taskId, jobId, recruiteeId, taskDescription, rating, ratingSpecified, null);
    }
    
    public void deleteTask(String taskId,String jobId,String recruiteeId,String taskDescription,double rating,boolean ratingSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","deleteTask");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("TaskId",taskId);
        soapReq.addProperty("JobId",jobId);
        soapReq.addProperty("RecruiteeId",recruiteeId);
        soapReq.addProperty("TaskDescription",taskDescription);
        soapReq.addProperty("Rating",rating);
        soapReq.addProperty("RatingSpecified",ratingSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/deleteTask", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/deleteTask", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void selectRatingsAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        selectRatingsAsync(null);
    }
    
    public void selectRatingsAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorTaskRatingDTO>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorTaskRatingDTO doInBackground(Void... params) {
                return selectRatings(headers);
            }
            @Override
            protected void onPostExecute(VectorTaskRatingDTO result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("selectRatings", result);
                }
            }
        }.execute();
    }
    
    public VectorTaskRatingDTO selectRatings(){
        return selectRatings(null);
    }
    
    public VectorTaskRatingDTO selectRatings(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","selectRatings");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/selectRatings", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/selectRatings", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorTaskRatingDTO resultVariable = new VectorTaskRatingDTO(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void selectAllRecommendedJobAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        selectAllRecommendedJobAsync(null);
    }
    
    public void selectAllRecommendedJobAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorRecommendedJobDto>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorRecommendedJobDto doInBackground(Void... params) {
                return selectAllRecommendedJob(headers);
            }
            @Override
            protected void onPostExecute(VectorRecommendedJobDto result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("selectAllRecommendedJob", result);
                }
            }
        }.execute();
    }
    
    public VectorRecommendedJobDto selectAllRecommendedJob(){
        return selectAllRecommendedJob(null);
    }
    
    public VectorRecommendedJobDto selectAllRecommendedJob(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","selectAllRecommendedJob");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/selectAllRecommendedJob", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/selectAllRecommendedJob", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorRecommendedJobDto resultVariable = new VectorRecommendedJobDto(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void selectRecommendedJobByJobIdAndRecruiteeIdAsync(String jobId,String recruiteeId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        selectRecommendedJobByJobIdAndRecruiteeIdAsync(jobId, recruiteeId, null);
    }
    
    public void selectRecommendedJobByJobIdAndRecruiteeIdAsync(final String jobId,final String recruiteeId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RecommendedJobDto>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RecommendedJobDto doInBackground(Void... params) {
                return selectRecommendedJobByJobIdAndRecruiteeId(jobId, recruiteeId, headers);
            }
            @Override
            protected void onPostExecute(RecommendedJobDto result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("selectRecommendedJobByJobIdAndRecruiteeId", result);
                }
            }
        }.execute();
    }
    
    public RecommendedJobDto selectRecommendedJobByJobIdAndRecruiteeId(String jobId,String recruiteeId){
        return selectRecommendedJobByJobIdAndRecruiteeId(jobId, recruiteeId, null);
    }
    
    public RecommendedJobDto selectRecommendedJobByJobIdAndRecruiteeId(String jobId,String recruiteeId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","selectRecommendedJobByJobIdAndRecruiteeId");
        soapReq.addProperty("JobId",jobId);
        soapReq.addProperty("RecruiteeId",recruiteeId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IServiceMobile/selectRecommendedJobByJobIdAndRecruiteeId", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IServiceMobile/selectRecommendedJobByJobIdAndRecruiteeId", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RecommendedJobDto resultVariable =  new RecommendedJobDto (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
}
